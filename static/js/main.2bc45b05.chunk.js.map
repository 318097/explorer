{"version":3,"sources":["store/utils.js","components/TitleBar.js","components/FolderList.js","components/Todo.js","components/TodoList.js","components/Window.js","store/actions.js","store/constants.js","components/layouts/Header.js","App.js","serviceWorker.js","store/reducer.js","store/index.js","index.js"],"names":["findFilesInPath","todos","fileList","fileInfo","files","children","forEach","fileId","file","type","id","push","Object","keys","parent","generatePath","absolutePath","currentFile","name","reverse","CustomLink","styled","span","TitleBar","navigate","path","className","Item","onClick","map","item","key","Wrapper","div","FolderList","history","length","TodoWrapper","TodoList","todo","task","status","data","Todo","getPath","params","mapDispatchToProps","setPath","payload","connect","ownProps","rootStructure","match","pathContent","useState","useEffect","Header","App","basename","exact","component","Window","render","to","Boolean","window","location","hostname","initialState","test","test2","child1","child2","reducer","state","action","fileHierarchy","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bc45b05.chunk.js","sourcesContent":["const findFilesInPath = (fileList = {}, fileInfo) => {\n  let files = [],\n    todos;\n  if (!fileInfo) {\n    Object.keys(fileList).forEach(id => {\n      const file = fileList[id];\n      if (!file.parent) {\n        if (file.type === \"todos\") todos = { ...file, id };\n        else files.push({ ...file, id });\n      }\n    });\n  } else {\n    fileInfo.children.forEach(fileId => {\n      const file = fileList[fileId];\n      if (file.type === \"todos\") todos = { ...file, id: fileId };\n      else files.push({ ...file, id: fileId });\n    });\n  }\n  return { files, todos };\n};\n\nconst generatePath = (fileList, fileInfo) => {\n  const absolutePath = [];\n\n  let currentFile = fileInfo;\n  while (currentFile) {\n    absolutePath.push({ name: currentFile.name, id: currentFile.id });\n    const id = currentFile.parent;\n    currentFile = fileList[id];\n    if (currentFile) currentFile.id = id;\n  }\n  const path = absolutePath.reverse();\n  return path;\n};\n\nexport { findFilesInPath, generatePath };\n","import React from \"react\";\nimport { Breadcrumb, Icon } from \"antd\";\nimport styled from \"styled-components\";\n\nconst CustomLink = styled.span`\n  transition: 0.5s;\n  cursor: pointer;\n  &:hover {\n    color: #337cca;\n  }\n`;\n\nconst TitleBar = ({ navigate, path = [] }) => {\n  return (\n    <div className=\"title-bar\">\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <CustomLink onClick={navigate()}>\n            <Icon type=\"home\" /> <span>Home</span>\n          </CustomLink>\n        </Breadcrumb.Item>\n        {path.map(item => (\n          <Breadcrumb.Item key={item.id}>\n            <CustomLink onClick={navigate(item.id)}>{item.name}</CustomLink>\n          </Breadcrumb.Item>\n        ))}\n      </Breadcrumb>\n    </div>\n  );\n};\n\nexport default TitleBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Icon } from \"antd\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #ccc;\n  height: 50px;\n  width: 50px;\n  padding: 1px 0;\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-align: center;\n  transition: all 0.5s;\n  &:hover {\n    background: lightgrey;\n  }\n  .icon {\n    font-size: 1.8rem;\n  }\n  .filename {\n    position: relative;\n    bottom: 3px;\n    font-size: 0.7rem;\n  }\n`;\n\nconst FolderList = ({ history, navigate, files = [] }) => {\n  return (\n    <div className=\"folder-list\">\n      {files.length > 0 ? (\n        files.map(file => {\n          return (\n            <Wrapper onClick={navigate(file.id)} key={file.id}>\n              <div>\n                <Icon className=\"icon\" type=\"folder\" />\n              </div>\n              <div className=\"filename\">{file.name}</div>\n            </Wrapper>\n          );\n        })\n      ) : (\n        <p className=\"empty-message\">Empty folder</p>\n      )}\n    </div>\n  );\n};\n\nexport default FolderList;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TodoWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  border: 1px solid lightgrey;\n  padding: 7px 5px;\n  margin: 3px 10px;\n  .name {\n    flex: 1 1 auto;\n  }\n`;\n\nconst TodoList = ({ todo }) => {\n  return (\n    <TodoWrapper>\n      <span className=\"name\">{todo.task}</span>\n      <span className=\"status\">{todo.status}</span>\n    </TodoWrapper>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport Todo from \"./Todo\";\n\nconst TodoList = ({ todos: { name, data = [] } = {} }) => {\n  return (\n    <div>\n      {data.length > 0\n        ? data.map(todo => <Todo key={todo.id} todo={todo} />)\n        : null}\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState, useEffect } from \"react\";\nimport { Divider } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { findFilesInPath } from \"../store/utils\";\n\nimport TitleBar from \"./TitleBar\";\nimport FolderList from \"./FolderList\";\nimport TodoList from \"./TodoList\";\n\nimport { setPath } from \"../store/actions\";\n\nconst getPath = params => (params.id ? params.id : \"/\");\n\nconst Window = ({ path, pathContent, match, setPath, history }) => {\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const path = getPath(match.params);\n    setPath(path);\n  }, [match]);\n\n  const navigate = id => () =>\n    history.push(id ? `/explorer/${id}` : \"/explorer\");\n\n  return (\n    <div>\n      <TitleBar navigate={navigate} path={path} />\n      <FolderList\n        navigate={navigate}\n        files={pathContent && pathContent.files}\n      />\n      <Divider />\n      <TodoList todos={pathContent && pathContent.todos} />\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ rootStructure, path }, ownProps) => {\n  const id = getPath(ownProps.match.params);\n  const fileInfo = rootStructure[id];\n\n  return {\n    path: path,\n    pathContent: findFilesInPath(rootStructure, fileInfo)\n  };\n};\nconst mapDispatchToProps = {\n  setPath\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Window);\n","import * as constants from \"./constants\";\n\nconst setPath = path => ({ type: constants.SET_PATH, payload: path });\n\nexport { setPath };\n","const SET_PATH = \"SET_PATH\";\n\nexport { SET_PATH };\n","import React from \"react\";\n\nconst Header = () => {\n  return <header>Explorer</header>;\n};\n\nexport default Header;\n","import React from \"react\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"./App.scss\";\nimport Window from \"./components/Window\";\nimport Header from \"./components/layouts/Header\";\nconst App = () => {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"app\">\n        <Header />\n        <section>\n          <Switch>\n            <Route exact path=\"/explorer/:id\" component={Window} />\n            <Route exact path=\"/explorer/\" component={Window} />\n            <Route exact path=\"/\" render={() => <Redirect to=\"/explorer\" />} />\n          </Switch>\n        </section>\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as constants from \"./constants\";\nimport { findFilesInPath, generatePath } from \"./utils\";\n\nconst initialState = {\n  path: [],\n  pathContent: {\n    files: [],\n    todos: []\n  },\n  rootStructure: {\n    test: {\n      name: \"test\",\n      type: \"folder\",\n      parent: null,\n      children: [\"child1\", \"child2\"]\n    },\n    test2: {\n      name: \"test2\",\n      type: \"folder\",\n      parent: null,\n      children: []\n    },\n    child1: {\n      name: \"child1\",\n      type: \"folder\",\n      parent: \"test\",\n      children: []\n    },\n    child2: {\n      name: \"child2\",\n      type: \"todos\",\n      parent: \"test\",\n      data: [\n        {\n          id: 1,\n          task: \"finish\",\n          status: \"none\"\n        }\n      ]\n    }\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case constants.SET_PATH: {\n      const fileHierarchy = state.rootStructure;\n      const id = action.payload;\n      const fileInfo = fileHierarchy[id];\n\n      let path, pathContent;\n      if (action.payload === \"/\") {\n        path = [];\n        // pathContent = findFilesInPath(fileHierarchy);\n      } else if (fileInfo) {\n        path = generatePath(fileHierarchy, { ...fileInfo, id });\n        // pathContent = findFilesInPath(fileHierarchy, fileInfo);\n      }\n\n      return {\n        ...state,\n        path,\n        pathContent\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore } from \"redux\";\n\nimport reducer from \"./reducer\";\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.scss\";\nimport \"antd/dist/antd.css\";\n\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}